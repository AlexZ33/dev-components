var $ = require('jquery');
var _ = require('lodash');
require('../iconfont/iconfont.css');
require('./tab_editor.css');

/**
 * 编辑器
 * ┌---┬------------------┐
 * | > |  编辑器头         |
 * ├---┼------------------┤
 * | T |  Tab1            |
 * | a |                  |
 * | b |                  |
 * | 1 |                  |
 * ├---┤                  |
 * | T |                  |
 * | a |                  |
 * | b |                  |
 * | 2 |                  |
 * └---┴------------------┘
 *
 * 结构:
 * 1. 编辑器头部信息
 * 2. 部件: 收缩/展开
 * 3. 部件: TAB标签
 * 4. 部件: TAB详细页
 *
 * @example
 * var editor = new Editor(selector, options);
 *
 * @param selector       选择器
 * @param options        配置
 *        |---- open : true              初始化状态是否是打开的,默认为打开
 *        |---- head : "<span>...</span>"   头部内容可以自定义
 *        |---- tabs :                      标签页
 *        |      |---- name : "配置"          |----标签页名
 *        |      |---- id   : "config"        |----标签页ID
 *        |      |---- content : ""           |----标签页内容
 * @constructor
 */
function TabEditor(selector, options) {
  if (!selector) {console.error('Error: there is no selector!'); return false; }
  this._init(selector, options);
}
TabEditor.template = {
  wrapper: _.template('<div class="te-wrapper"><div class="te-tab-scale iconfont" data-open="<%= open %>">&#xe62a;</div><%= head %><%= tabs %></div>'),
  head:  _.template('<div class="te-head" id="component-head"><%= content %><div class="child-head"></div></div>'),
  tab:  _.template('<input type="radio" name="te-tab-radio" class="te-tab-radio" id="te-tab-<%= id %>" <%= checked ? "checked=true" : "" %>>\
  <label for="te-tab-<%= id %>" class="te-tab-handler te-tab-handler-config"><a href="#<%= id %>"><%= name %></a></label>\
  <div class="te-tab-content te-tab-content-<%= id %>"> <%= showname ? name + "页" : "" %> </div>')
}
TabEditor.prototype = {
  _init: function (selector, options) {
    this.defaults = {
      head: null,
      tabs: [{name: "TAB1", id: "tab1", content: "标签页1"}]
    }
    this.defaults = _.defaultsDeep(options, this.defaults);
    this.container = $(selector);
    var w = this.container.width(), h = this.container.height();
    this.width = options.width || (w && w+'px') || '400';
    this.height = options.height || (h && h + 'px') || '100%';
    this.container.css({
      background: 'transparent',
      overflow: 'hidden',
      padding: '1em 0 1em .29em',
      'overflow-y': 'hidden',
      width: this.width,
      height: this.height
    })
    this.container.append(TabEditor.template.wrapper({
      head: this.defaults.head && TabEditor.template.head({content: this.defaults.head}) || "",
      tabs: _.map(this.defaults.tabs, function (obj, i) {
        obj.checked = (i===0)
        return TabEditor.template.tab(obj);
      })
    }))
    this._initEvent();
  },
  _initEvent: function () {
    var self = this;
    var cfg = this.defaults;
    this.scale = this.container.find('.te-tab-scale');
    this.scale.on("click", function () {
      var attr = this.getAttribute('data-open');
      if (attr === 'true') {
        sidebar.style.width = 'auto';
        this.setAttribute('data-open', 'false');
        this.innerHTML = '&#xe62b;'
      } else {
        sidebar.style.width = self.width;
        this.setAttribute('data-open', 'true');
        this.innerHTML = '&#xe62a;'
      }
    })
    var page = window.location.hash && window.location.hash.replace('#', '') || cfg.tabs[0].id;
    $('#te-tab-' + page).prop('checked', true);
    this.container.find('.te-tab-handler').on('click', 'a', function () {
      this.parentNode.click();
    })
  },
  getTab: function (name) {
    return this.container.find(".te-tab-content-" + name);
  }
}

module.exports = TabEditor;