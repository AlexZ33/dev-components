var Reflux = require('../lib/reflux');
var Action = require('./action');
var _ = require('lodash');
var $ = require('jquery');

var Store = Reflux.createStore({
  listenables: [Action],
  cache: null,
  _getCache: function () {
    if (!this.cache) {
      this.cache = {
        selectedComId: null,//若为空,默认选择父组件
        selectedCom: window.chart,//若为空,默认选择父组件
        selectedComValidate: window.share.datav.validate,
        selectedComConfig: window.share.datav.config,
        selectedComApis: window.share.datav.apis,
        selectedComApisData: window.share.datav.api_data,
        selectedComInfo: {
          name: window.share.datav.cn_name,
          version: window.share.version
        },
        parentCom: window.chart,//实例
        parent: {
          config: window.share.datav.config,
          validate: window.share.datav.validate
        },
        children: window.share.children,
        childrenIds: window.share.childrenIds,
        childrenComs: window.share.childrenComs 
      }
    }
    return this.cache;
  },
  getInitialState: function () {
    return this._getCache();
  },
  triggerState: function (newState) {
    var self = this;
    _.forIn(newState, function (o, k) {
      self.cache[k] = o;
    });
    this.trigger(newState);
  },
  onUpdateConfig: function (state, newConfig) {
    var currConfig = state.selectedComConfig;
    var validate = state.selectedComValidate;
    var com = state.selectedCom;

    var diff = this._checkConfigDiff(newConfig, currConfig, validate);
    console.log('_checkConfigDiff', diff);
    if (diff) {
      var handler = diff.handler;

      if (handler && com[handler]) {
        com[handler](JSON.parse(JSON.stringify(diff.value)));
      } else if (com.updateOptions) {
        com.updateOptions(JSON.parse(JSON.stringify(newConfig)));
      } else {
        com.render(null, JSON.parse(JSON.stringify(newConfig)));
      }

      if (!state.selectedComId) {
        window.share.datav.config = newConfig;
        this.triggerState({
          selectedComConfig: newConfig
        });
      } else {
        var childrenComs = state.childrenComs;
        var instIndex = _.findIndex(childrenComs, function (o) {
          return o.comId == state.selectedComId;
        });
        if (childrenComs[instIndex]) {
          childrenComs[instIndex]._config = newConfig; 
        }

        window.share.childrenComs = childrenComs;
        this.triggerState({
          selectedComConfig: newConfig,
          childrenComs: childrenComs
        });
      }
    }
  },
  onUpdateData: function (state, data, apiObj, apiName) {
    var com = state.selectedCom;
    var handler = apiObj.handler;
    var _data  = _.cloneDeep(data);
    if (handler && com[handler]) {
      com[handler](data, null);
    } else {
      com.render(data, null);
    }

    var apisData = state.selectedComApisData;
    apisData[apiName] = _data;

    if (!state.selectedComId) {
      window.share.datav.api_data = apisData;
      this.triggerState({
        selectedComApisData: apisData
      });
    } else {
      var childrenComs = state.childrenComs;
      var instIndex = _.findIndex(childrenComs, function (o) {
        return o.comId == state.selectedComId;
      });
      if (childrenComs[instIndex]) {
        childrenComs[instIndex]._apisData = apisData; 
      }

      window.share.childrenComs = childrenComs;
      this.triggerState({
        selectedComApisData: apisData,
        childrenComs: childrenComs
      });
    }
  },
  onSelectParent: function (state) {
    this.triggerState({
      selectedComId: null,//若为空,默认选择父组件
      selectedCom: window.chart,//若为空,默认选择父组件
      selectedComValidate: window.share.datav.validate,
      selectedComConfig: window.share.datav.config,
      selectedComApis: window.share.datav.apis,
      selectedComApisData: window.share.datav.api_data,
      selectedComInfo: {
        name: window.share.datav.cn_name,
        version: window.share.version
      }
    })
  },
  onSelectChild: function (state, comId) {
    var idIndex = _.findIndex(state.childrenIds, function (o) {
      return o == comId;
    });
    var instIndex = _.findIndex(state.childrenComs, function (o) {
      return o.comId == comId;
    });
    if (idIndex > -1 && instIndex > -1) {
      var com = state.childrenComs[instIndex];
      var config = getComConfigByDir(com._dir);
      this.triggerState({
        selectedComId: comId,
        selectedCom: com.instance,
        selectedComValidate: config.config.validate,
        selectedComConfig: com._config,
        selectedComApis: config.config.apis,
        selectedComApisData: com._apisData,
        selectedComInfo: {
          dir: config._dir,
          name: config.config.cn_name,
          version: config.version
        }
      })
    }
  },
  onAddChild: function (state, componentName) {
    var self = this;
    var componentName = componentName.split('@')[0];
    var index = _.findIndex(state.children, function (o) {
      return o.name == componentName;
    });
    if (index < 0) return;
    var comConfig = state.children[index];

    load(['/children/' + comConfig._dir + '/index.js'], function (_Com) {
      var _config = JSON.parse(JSON.stringify(comConfig.datav.config));
      var _childrenCom = new _Com($('<div/>'), _config);

      var _comId = comConfig.datav.cn_name + '_' + randomWord(false, 5);
      state.childrenComs.push({
        comId: _comId,
        _dir: comConfig._dir,
        instance: _childrenCom,
        _config: _config,
        _apisData: JSON.parse(JSON.stringify(comConfig.datav.api_data))
      });
      state.childrenIds.push(_comId);

      state.parentCom && state.parentCom.add && state.parentCom.add(_childrenCom, _comId);
      render(_childrenCom, comConfig.datav.apis);

      window.share.childrenIds = state.childrenIds;
      window.share.childrenComs = state.childrenComs;

      self.triggerState({
        childrenComs: state.childrenComs,
        childrenIds: state.childrenIds
      });
    });
  },
  onDeleteChild: function (state, comId) {
    var idIndex = _.findIndex(state.childrenIds, function (o) {
      return o == comId;
    });
    var instIndex = _.findIndex(state.childrenComs, function (o) {
      return o.comId == comId;
    });

    if (idIndex > -1 && instIndex > -1) {
      var childrenComs = state.childrenComs;
      var childrenIds = state.childrenIds;

      var childCom = childrenComs[instIndex];
      window.chart && window.chart.remove && window.chart.remove(childCom.instance, comId);
      childCom && childCom.instance && childCom.instance.destroy && childCom.instance.destroy();
      delete childCom.instance;

      _.remove(childrenComs, function(o) {
        return o.comId == comId; 
      });
      _.remove(childrenIds, function(o) {
        return o == comId; 
      });

      this.triggerState({
        childrenComs: childrenComs,
        childrenIds: childrenIds
      })
    }
  },
  _checkConfigDiff: function (nextConfig, currConfig, validate){
    return this._findDiffKey(nextConfig, currConfig, validate);
  },
  _findDiffKey: function (next, curr, validate, keyObj, handler){
    var validate = validate || {};
    var found = false;
    var self = this;
    _.forEach(validate, function(val, key){
      if (val) {
        if (val.handler !== handler) keyObj = next[key];
        if (val.children) {
          found = self._findDiffKey(next[key], curr[key], val.children, keyObj, val.handler);
          if (found) {
            return false
          }
        } else {
          if (!_.eq(next[key], curr[key])) {
            found = {key: key, handler: val.handler, value: keyObj || next}
            return false
          }
        }
      }
    })
    return found;
  }
})

module.exports = Store;