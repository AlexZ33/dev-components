var React = require('react');
var _ = require('lodash');
var $ = require('jquery');

var GUI = require('/react-maliang-editor').GUI;
var ChildrenSelector = require('/react-maliang-editor').ChildrenSelector;
var ChildrenManager = require('/react-maliang-editor').ChildrenManager;
var Store = require('./store');
var Action = require('./action');
var Reflux = require('../lib/reflux');
var BreadCrumb = require('./rbreadcrumb');

/**** ConfigEditor *****/
var ConfigEditor = React.createClass({
  mixins: [Reflux.connect(Store)],
  getInitialState: function() {
    return {
      syncing: false
    }
  },
  render: function () {
    return (
      <div className="gui-scroll-container" style={{
        width: '100%',
        height: '100%',
        overflow: 'scroll'
      }}>
        <BreadCrumb />
        {
          !this.state.selectedComId && !_.isEmpty(this.state.childrenIds) ? <ChildrenManager children={this.state.childrenIds} editChild={this.editChild} deleteChild={this.deleteChild}/> : null
        }
        {
          !this.state.selectedComId && !_.isEmpty(this.state.children) ? <ChildrenSelector comList={this.state.children} addChild={this.addChild}/> : null
        }
        <GUI configObj={this.state.selectedComValidate} valueObj={this.state.selectedComConfig} onChange={this.change} uploadUrl="/icon_save/0" uniqueId={this.state.selectedComId || 'parent-chart'} />
        <div className="sync">
          <button className={'sync-button ' + (this.state.syncing ? 'syncing' : '')} onClick={this.sync} >一键同步{this.state.syncing ? '...' : ''}</button>
        </div>
      </div>
    );
  },
  change: function (handler, handlerObj, rootObj, key, value) {
    Action.updateConfig(this.state, rootObj);
  },
  sync: function () {
    var self = this;
    if (this.state.syncing) return;

    if (this.state.selectedComId) {
      $.post('/child_config_save/' + this.state.selectedComInfo.dir, {
        config: JSON.stringify(this.state.selectedComConfig)
      }, function (data) {

        data = JSON.parse(data);
        if (data.isError) {
          alert('同步失败:' + data.message);
        } else {
          alert('同步成功!');
        }
        self.setState({
          syncing: false
        });
      });
    } else {
      $.post('/config_save', {
        config: JSON.stringify(window.share.datav.config)
      }, function (data) {
        data = JSON.parse(data);
        if (data.isError) {
          alert('同步失败:' + data.message);
        } else {
          alert('同步成功!');
        }
        self.setState({
          syncing: false
        });
      });
    }

    
    self.setState({
      syncing: true
    })
  },
  editChild: function (comId) {
    Action.selectChild(this.state, comId);
  },
  deleteChild: function (comId) {
    Action.deleteChild(this.state, comId);
  },
  addChild: function (comName) {
    Action.addChild(this.state, comName);
  }
});

module.exports = ConfigEditor;