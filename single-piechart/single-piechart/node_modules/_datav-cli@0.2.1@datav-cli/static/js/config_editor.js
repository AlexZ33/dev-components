var $ = require('jquery');
var _ = require('lodash');
var DatavGui = require('@ali/datav-gui');

/************* datav 数据 ***************/
var datav = window.share.datav;
var config = datav.config;
var coms = datav.coms;
var validate = datav.validate;
var children = coms && coms.children;
/************* datav 数据 ***************/

var addController = function (objs, text, parent, allText, handler, chart, isFold) {
  if(objs.fold) isFold = true;
  _.forIn(objs, function(item, key) {
    if (key === 'handler') {
      handler = item;
      allText = text;
      return true;
    }

    var name = item.name || key;
    var controller;
    try {
      switch (item.type) {
        case 'coms':
          break;
        case 'fold':
          break;
        case 'color':
          controller = parent.addColor(text, key);
          break;
        case 'number':
          var min = !isNone(item.min) ? item.min: (item.range && (_.isArray(item.range) ? item.range[0] : item.range.min));
          var max = !isNone(item.max) ? item.max: (item.range && (_.isArray(item.range) ? item.range[1] : item.range.max));
          if (_.isNumber(min) && _.isNumber(max) && _.isNumber(text[key])) {
            controller = parent.add(text, key, min, max);
            if(item.step) controller.step(item.step);
          } else {
            controller = parent.add(text, key);
          }
          break;
        case 'options':
        case 'select':
          var arr = item.range || item.options;
          var range = _.isArray(arr) ? _.zipObject(_.map(arr, 'name'), _.map(arr, 'value')) : arr;
          controller = parent.add(text, key, range);
          break;
        case 'image':
          if (text[key].indexOf('url(') !== -1) {
            text[key] = text[key].slice(4, text[key].length - 1);
          }
          controller = parent.addImage(text, key)
            .req('/icon_save/0')
            .res(function(data) {
              data = JSON.parse(data);
              if (data.isError) {
                alert('error : ' + data.message);
                return '/__static__/img/transparent.png';
              }
              return 'https://datav.oss-cn-hangzhou.aliyuncs.com/uploads/images/' + data.data;
            });
          break;
        case 'group':
          var group = parent.addFolder(name);
          addController(item.children, text[key], group, allText, handler, chart, isFold);
          return true;
        case 'hidden':
          break;
        default:
          if(key && !isNone(text[key])) controller = parent.add(text, key);
      }
    } catch (e) {
      console.log(e);
      console.log(e.stack);
    }
    var changeFun = function(k) {
      var content = _.cloneDeep(allText);
      if (chart[handler]) return chart[handler](content);
      if (chart.updateOptions) return chart.updateOptions(content);
      return chart.render(null, content);
    };
    if (controller) {
      if (item.onFinishChange) {
        controller.onFinishChange(changeFun);
      } else {
        controller.onChange(changeFun);
      }
      controller.name(name);
    }
  });
  if(!isFold) parent.open();
}



/** ======= 子组件控制器 ======= */
module.exports = function (container) {
  //子组件控制器
  if (window.share.children && window.share.children.length) {
    var childrenSelector = $('<div id="children-com-list"></div>');
    container.html(childrenSelector);
    window.share.childrenComManager.addToConfigEditor(childrenSelector);
  }

  var guiContainer = $('<div id="parent-config-editor"></div>');
  container.append(guiContainer);

  var gui = new DatavGui.GUI({
    scrollContainer: guiContainer.parents('.te-tab-content').get(0),
    autoPlace: false,
    req: '/icon_save/0',
    res: function (data) {
      data = JSON.parse(data);
      if (data.isError) {
        alert('error : ' + data.message);
        return '/__static__/img/transparent.png';
      }
      return 'https://datav.oss-cn-hangzhou.aliyuncs.com/uploads/images/' + data.data;
    }
  });
  gui.addController(validate, config, function (k, text, allText, validate) {
    var handler = validate.handler;
    var content = _.cloneDeep(handler && text || allText);
    if (chart[handler]) return chart[handler](content);
    if (chart.updateOptions) return chart.updateOptions(content);
    return chart.render(null, content);
  });
  guiContainer.html(gui.domElement);
  

  container.append('<div class="config-content-line content-line"><botton id="config-btn" class="content-btn">一键同步</botton></div>');
  var config_btn = $('#config-btn');
  config_btn.on('click', function () {
    var self = this;
    $(this).html('<image src="/__static__/iconfont/load.svg"></image>');
    $.post('/config_save', {
      config: JSON.stringify(config)
    }, function (data) {
      $(self).html('一键同步');
      data = JSON.parse(data);
      if (data.isError) {
        alert('同步失败:' + data.message);
      } else {
        alert('同步成功!');
      }
    })
  });
}