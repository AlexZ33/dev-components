var _ = require('lodash');
var $ = require('jquery');
var Editor = require('./tab_editor');
var editorConfig = require('./config');
var editor;
var ChildrenComManager = require('./children-com-manager');

window.render = function (chart, apis) {
  for (var key in apis) {
    var api = apis[key];
    var handler = api.handler || 'render';
    var data = api.default;
    //不检查data,用作检查组件应对脏数据
    chart[handler](_.cloneDeep(data));
  }
}

/************* datav 数据 ***************/
var datav = window.share.datav;
var view = datav.view;
var config = datav.config;
var apis = datav.apis;
var coms = datav.coms;
var validate = datav.validate;
var children = coms && coms.children;
var defaultChildren = datav.children && datav.children.default ? datav.children.default : null;
/************* datav 数据 ***************/

function initCom(selector, cb) {
  var chartWidth, chartHeight, chartMinWidth, chartMinHeight;
  if (view) {
    chartWidth = window.share.chartWidth = parseInt(view.width) || 400;
    chartHeight = window.share.chartHeight = parseInt(view.height) || 0;
    chartMinWidth = window.share.chartMinWidth = parseInt(view.minWidth) || 0;
    chartMinHeight = window.share.chartMinHeight = parseInt(view.minHeight) || 0;
  } else {
    chartWidth = window.share.chartWidth = 400;
    chartHeight = window.share.chartHeight = 0;
    chartMinWidth = window.share.chartMinWidth = 0;
    chartMinHeight = window.share.chartMinHeight = 0;
  }
  var dom = window.chartDom = $(selector);
  dom.css({
    width: chartWidth + 'px',
    height: chartHeight + 'px',
    minWidth: chartMinWidth + 'px',
    minHeight: chartMinHeight + 'px'
  })

  Cube.use(window.share.source, function (Chart) {
    var cfg = _.cloneDeep(config);
    cfg.apis = _.cloneDeep(apis);
    var time1 = new Date();
    window.Chart = Chart;
    var chart = window.chart = new Chart(selector, cfg);
    render(chart, apis);
    window.time = new Date() - time1;
    cb && cb();
    if (defaultChildren) {
      for (var i = 0; i < defaultChildren.length; i++) {
        var name = defaultChildren[i];
        var index = _.findIndex(window.share.children, function (o) {
          return o.name == name;
        });
        if (index >= 0) {
          window.share.childrenComManager._addToParent(window.share.children[index]._dir);
        }
      }
    }
  })
}

function initEditor(selector, config) {
  return new Editor(selector, config);
}

function initEvent() {
  var cnname = $('.chart-cnname');
  var cn_ipt;
  var old_name;
  function saveCNName() {
    cnname.html(cn_ipt.val())
    $.post('/cnname_save', {name: cn_ipt.val()}, function (data) {
      if (data.isError) {
        alert('同步失败: ', data.message);
        cnname.html(old_name);
      }
      cnname.data('edit', 'false');
    })
  }
  cnname.on('dblclick', function () {
    var that = $(this);
    if (that.data('edit') === 'true') {
      saveCNName()
    } else {
      that.data('edit', 'true');
      old_name = that.html();
      that.html(that.data('input'));
      cn_ipt = that.find('input');
      cn_ipt.val(old_name);
      cn_ipt.on('keyup', function (event) {
        if (event.keyCode == 13) {
          saveCNName()
        }
      })
    }
  });

  $(document).on('click', function (event) {
    if (cn_ipt && event.target === cn_ipt[0]) return;
    if (cnname.data('edit') === 'true') {
      saveCNName()
    }
  })
}

module.exports = function (cfg) {
  window.share.childrenComManager = new ChildrenComManager(window.share.children);
  var ec = editorConfig(datav);
  var editor = initEditor(cfg.editor, ec);
  initCom(cfg.com, function () {
    ec.tabs.length && ec.tabs.forEach(function (obj) {
      obj.handler && obj.handler(editor.getTab(obj.id));
    })
    initEvent()
  });
}


