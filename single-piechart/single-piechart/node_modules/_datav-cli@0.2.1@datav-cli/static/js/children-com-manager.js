var $ = require('jquery');
var _ = require('lodash');
var DatavGui = require('@ali/datav-gui');
var JSONEditor = require('../lib/jsoneditor.min.js');


function _renderApi(chart, apis, key) {
  var api = apis[key];
  var handler = api.handler || 'render';
  var data = api.default;
  //不检查data,用作检查组件应对脏数据
  chart[handler](_.cloneDeep(data));
}


/** ======= 子组件控制器 ======= */
function ChildrenManager(children) {
  this.childrenList = children;
  this.childrenComs = [];
  this.currentCom = null;


  this.configEditorContainer = null;

  this.configEditorSelector = null;

  this.configEditorSelectorContainer = null;
  this.childrenListContainer = null;
  this.childrenConfigEditor = null;


  this.childrenDataEditorContainer = null;
  this.childrenDataEditor = null;

  this.init();
}

ChildrenManager.prototype.init = function () {
}


ChildrenManager.prototype.addToConfigEditor = function (container) {
  var self = this;
  this.configEditorContainer = container;
  if (this.childrenList && this.childrenList.length) {
    var list = [];
    list.push('<select>');
    list.push('<option value="-1">选择子组件</option>');
    
    for (var i = 0; i < this.childrenList.length; i++) {
      var _children = this.childrenList[i];
      list.push('<option value="' + _children._dir + '">' +  _children.datav.cn_name + '@' + _children.version + '</option>');
    }
    list.push('</select>');

    this.configEditorSelectorContainer = $('<div class="children-com-selector"/>');
    this.configEditorSelector = $(list.join(''));
    this.configEditorSelectorContainer.append('<label>&nbsp;&nbsp;添加子组件： </label>');
    this.configEditorSelectorContainer.append(this.configEditorSelector);

    this.configEditorContainer.append(this.configEditorSelectorContainer);
    
    this.configEditorSelector.on('change', function () {
      var value = self.configEditorSelector.val();
      if (value !== '-1') {
        self._addToParent(value);
        setTimeout(function () {
          self.configEditorSelector.prop('selectedIndex', 0);
        }, 0);
      }
    })
  }

}


ChildrenManager.prototype.addToDataEditor = function (container) {
  this.childrenDataEditorContainer = container;
}

ChildrenManager.prototype._showChildDataEditor = function (_comId) {
  var self = this;
  if (!this.childrenDataEditor) {
    this.childrenDataEditor = $('<div/>');
    this.childrenDataEditorContainer.append('<a href="javascript:;" class="back-to-parent">返回父组件</a>');
    this.childrenDataEditorContainer.append(this.childrenDataEditor);

    this.childrenDataEditorContainer.on('click', '.back-to-parent', function () {
      self._backToParent();
    });

    this.childrenDataEditor.on('click', '.data-editor-line > ol', function () {
      var that = $(this).parent();
      if (that.is('.active')) {
        that.find('.data-editor-field').slideUp(duration);
        that.find('.data-editor-data').slideUp(duration);
        that.removeClass('active');
      } else {
        var actDom = $('.data-editor-line.active');
        that.find('.data-editor-field').slideDown(duration);
        that.find('.data-editor-data').slideDown(duration);
        active = that.data('api');
        actDom.find('.data-editor-field').slideUp(duration);
        actDom.find('.data-editor-data').slideUp(duration);
        actDom.removeClass('active');
        that.addClass('active');
      }
    });

    
  }

  var comInstance = this._getComInstanceByComId(_comId);
  var comConfig = this._getComConfigByDir(comInstance._dir);
  var apis = comConfig.datav.apis;
  var validate = comConfig.datav.validate;
  var duration = 300;
  var active;
  var editors = {};

  function convert2Apis(data) {
    apis[active].default = data;
    return true;
  }

  function getAllData() {
    var res = {};
    _.forIn(apis, function (obj, key) {
      res[key] = obj.default;
    })
    return res;
  }

  function validateApi(data) {
    var flag = true;
    data = data && data[0] || {};
    _.forIn(apis[active].fields, function (no, nk) {
      var dom = self.childrenDataEditor.find('.data-editor-field-' + nk + ' ol:last-child');
      if (no.optional) {
        dom.html('可选字段')
      } else  if (_.has(data, nk)) { 
         dom.html('匹配完成')
        } else { 
         flag = false;   dom.html('匹配未完成') 
       }
    })
    if (flag) {
      self.childrenDataEditor.find('.data-editor-line-' + active + ' .data-editor-status').removeClass('failed').addClass('success').html('匹配完成')
    } else {
      self.childrenDataEditor.find('.data-editor-line-' + active + ' .data-editor-status').removeClass('success').addClass('failed').html('匹配未完成')
    }
    return flag;
  }


  var field = _.template('<div class="data-editor-field-<%= field %>"><ol><%= field %></ol><ol><%= des %></ol><ol><%= status %></ol></div>');
  var line = _.template('<li class="data-editor-line data-editor-line-<%= name %> <%= active %>" data-api="<%= name %>"><ol><%= name %></ol><ol><%= des %></ol><ol class="data-editor-status <%= status %>"><%= statusName %></ol>' +
    '<div class="data-editor-field"><div><ol>字段</ol><ol>说明</ol><ol>状态</ol></div><%= field %></div>' +
    '<div class="data-editor-data">JSON数据<div class="data-editor-json"></div></div></li>');


  if (!apis || _.isEmpty(apis)) {
    this.childrenDataEditor.html('<p>当前选中子组件：' + comInstance.comId + '</p><ul class="data-editor-ul"><li style="text-align: center">无API</li></ul>');
  } else {
    var str = '<p>当前选中子组件：' + comInstance.comId + '</p><ul class="data-editor-ul">' +
      '<li><ol>接口</ol><ol>说明</ol><ol>状态</ol></li>';
    var i = 0;
    var keys = [];
    _.forIn(apis, function (obj, key) {
      var fieldStr = '';
      if (i===0) {active = key;}
      var data = obj.default;
      var flag = true;
      data = data && data[0] || {};
      _.forIn(obj.fields, function (no, nk) {
        var tmpF = -1;
        if (no.optional) {tmpF = 0;} else if (_.has(data, nk)) {tmpF = 1;} else {flag = false;}
        fieldStr += field({
          field: nk,
          des: no.description,
          status: tmpF && '配置完成' || ((tmpF === 0) && '可选字段') || '配置未完成'
        })
      })
      str += line({
        active: i===0?'active':'',
        name: key,
        des: obj['description'],
        status: flag && 'success' || 'failed',
        statusName: flag && '配置完成' || '配置未完成',
        field: fieldStr
      })
      i++;
      keys.push(key);
    });

    str += '</ul>';
    this.childrenDataEditor.html(str);
    var options = {
      mode: 'code',
      onChange: function () {
        if (editor && validateApi(!_.isEmpty(editor.getText()) && editor.get() || null)) {
          convert2Apis(editor.get()) && _renderApi(comInstance.instance, apis, keys[0]);
        }
      }
    };

    var con = this.childrenDataEditor.find('li.active .data-editor-json');
    var editor = new JSONEditor(con[0], options);

    editor.set(apis[active].default);
    editors[active] = editor;

    this.childrenDataEditor.find(".active .data-editor-field").slideDown(duration)
    this.childrenDataEditor.find(".active .data-editor-data").slideDown(duration)

    setTimeout(function () {
      var i = 0;
      _.forIn(apis, function (obj, key) {
        if (i===0) {
          i++;
          return true;
        }
        var con = self.childrenDataEditor.find('li .data-editor-json');
        var editor = new JSONEditor(con[i], {
          mode: 'code',
          onChange: function () {
            if (editor && validateApi(!_.isEmpty(editor.getText()) && editor.get() || null)) {
              convert2Apis(editor.get()) && _renderApi(comInstance.instance, apis, key);
            }
          }
        });
        editor.set(apis[key].default)
        editors[key] = editor;
        i++;
      });
    }, 30);
    // this.childrenDataEditor.append('<div class="data-content-line content-line"><botton class="data-btn content-btn">一键同步</botton></div>');
  }

  /*
  this.childrenDataEditor.find('.data-btn').on('click', function () {
    if (editors === {}) {alert('editor error'); return}
    var self = this;
    $(this).html('<image src="/__static__/iconfont/load.svg"></image>');
    $.post('/child_data_save/' + comInstance._dir, getAllData(), function (data) {
      $(self).html('一键同步');
      data = JSON.parse(data);
      if (data.isError) {
        alert('同步失败:' + data.message);
      } else {
        alert('同步成功!');
      }
    })
  });*/

}

ChildrenManager.prototype._getComInstanceByComId = function (comId) {
  var index = _.findIndex(this.childrenComs, function(o) {
    return o.comId == comId; 
  });
  if (index >= 0) {
    return this.childrenComs[index];
  } else {
    return null;
  }
}

ChildrenManager.prototype._getComInstanceByDir = function (_dir) {
  var index = _.findIndex(this.childrenComs, function(o) {
    return o._dir == _dir;
  });
  if (index >= 0) {
    return this.childrenComs[index];
  } else {
    return null;
  }
}

ChildrenManager.prototype._getComConfigByDir = function (_dir) {
  var index = _.findIndex(this.childrenList, function(o) {
    return o._dir == _dir;
  });
  if (index >= 0) {
    return this.childrenList[index];
  } else {
    return null;
  }
}


// 更新子组件列表 DOM
ChildrenManager.prototype._updateChildrenList = function () {
  var self = this;
  if (!this.childrenListContainer) {
    this.childrenListContainer = $('<div class="children-list"/>');
    this.configEditorContainer.append(this.childrenListContainer);
    this.childrenListContainer.on('click', 'a.edit', function () {
      var comId = $(this).data('comid');
      self._showChild(comId);
    }).on('click', 'a.delete', function () {
      var comId = $(this).data('comid');

      self._deleteFromParent(comId);
    });
  }
  var list = ['<ul>'];
  for (var i = 0; i < this.childrenComs.length; i++) {
    var _comId = this.childrenComs[i].comId;
    list.push('<li>' + _comId + '&nbsp;&nbsp;<a href="javascript:;" class="edit" data-comid="' + _comId + '">编辑</a>&nbsp;&nbsp;<a href="javascript:;" class="delete" data-comid="' + _comId + '">删除</a></li>');
  }
  list.push('</ul>');
  this.childrenListContainer.html(list.join(''));
  
}

ChildrenManager.prototype._backToParent = function () {
  var self = this;
  $('#parent-config-editor').show();
  self.configEditorSelectorContainer.show();
  self.childrenListContainer.show();
  self.childrenConfigEditor.hide();

  $('#parent-data-editor').show();
  self.childrenDataEditorContainer.hide();

  self.currentCom = null;
} 

ChildrenManager.prototype._showChild = function (comId) {
  var self = this;

  try {
    $('#parent-config-editor').hide();
    self.configEditorSelectorContainer && self.configEditorSelectorContainer.hide();
    self.childrenListContainer && self.childrenListContainer.hide();
    self.childrenConfigEditor && self.childrenConfigEditor.show();

    $('#parent-data-editor').hide();
    self.childrenDataEditorContainer && self.childrenDataEditorContainer.show();
  } catch(e) {
    console.log('_showChild', e)
  }
  


  self._showChildConfigEditor(comId);
  self._showChildDataEditor(comId);
}

ChildrenManager.prototype._showChildConfigEditor = function (comId) {
  var self = this;
  if (!this.childrenConfigEditor) {
    this.childrenConfigEditor = $('<div>\
        <a href="javascript:;" class="back-to-parent">返回父组件</a>\
        <div class="children-config-editor"></div>\
      </div>');
    this.configEditorContainer.append(this.childrenConfigEditor);
    this.configEditorContainer.on('click', '.back-to-parent', function () {
      self._backToParent();
    });
  }

  var index = _.findIndex(this.childrenComs, function(o) {
    return o.comId == comId; 
  });
  var childrenCom = this.childrenComs[index];

  index = _.findIndex(this.childrenList, function(o) {
    return o._dir == childrenCom._dir; 
  });
  var childrenComConfig = this.childrenList[index];

  this.currentCom = comId;

  // return;
  var gui = new DatavGui.GUI({
    scrollContainer: this.childrenConfigEditor.parents('.te-tab-content').get(0),
    autoPlace: false,
    req: '/icon_save/0',
    res: function (data) {
      data = JSON.parse(data);
      if (data.isError) {
        alert('error : ' + data.message);
        return '/__static__/img/transparent.png';
      }
      return 'https://datav.oss-cn-hangzhou.aliyuncs.com/uploads/images/' + data.data;
    }
  });
  var chart = childrenCom.instance;
  gui.addController(childrenComConfig.datav.validate, childrenCom._config, function (k, text, allText, validate) {
    var handler = validate.handler;
    var content = _.cloneDeep(handler && text || allText);
    if (chart[handler]) return chart[handler](content);
    if (chart.updateOptions) return chart.updateOptions(content);
    return chart.render(null, content);
  });
  this.childrenConfigEditor.find('.children-config-editor').html(gui.domElement);
}

ChildrenManager.prototype._deleteFromParent = function (_comId) {
  var index = _.findIndex(this.childrenComs, function(o) {
    return o.comId == _comId; 
  });
  if (index >= 0) {
    var childCom = this.childrenComs[index];
    window.chart && window.chart.remove && window.chart.remove(childCom.instance, _comId);
    childCom && childCom.instance && childCom.instance.destroy && childCom.instance.destroy();
    delete childCom.instance;
    _.remove(this.childrenComs, function(o) {
      return o.comId == _comId; 
    });
    this._updateChildrenList();
  }
}

ChildrenManager.prototype._addToParent = function (_dir) {
  var self = this;
  Cube.use(['/children/' + _dir + '/index.js', ], function (_Com) {
    var comConfig = self._getComConfigByDir(_dir);
    var _config = JSON.parse(JSON.stringify(comConfig.datav.config));
    var _childrenCom = new _Com($('<div/>'), _config);

    var _comId = comConfig.datav.cn_name + '_' + randomWord(false, 5);
    self.childrenComs.push({
      comId: _comId,
      _dir: _dir,
      instance: _childrenCom,
      _config: _config 
    });
    window.chart && window.chart.add && window.chart.add(_childrenCom, _comId);
    render(_childrenCom, comConfig.datav.apis);
    self._updateChildrenList();
  });
}


function randomWord(randomFlag, min, max){
  var str = "",
    range = min,
    arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];

  // 随机产生
  if(randomFlag){
    range = Math.round(Math.random() * (max-min)) + min;
  }
  for(var i=0; i<range; i++){
    var pos = Math.round(Math.random() * (arr.length-1));
    str += arr[pos];
  }
  return str;
}



module.exports = ChildrenManager;