var ex = require('express');
var bodyParser = require('body-parser');
var ejs = require('ejs');
var path = require('path');
var partials = require('express-partials');
var fs = require('xfs');
var app = ex();
var childProcess = require('child_process');
var mw = require('./middleware');
var multer = require('multer');
var checkVersion = require('./utils/checkVersion');
var shelljs = require('shelljs');

function isAbsPath(p) {
  if (process.platform.indexOf('win') === 0) {
    return /^\w:/.test(p);
  } else {
    return /^\//.test(p);
  }
}

function isNone(v) {
  return v === undefined;
}

module.exports = function (source, args) {
  shelljs.config.verbose = true;
  shelljs.config.silent = true;
  if (typeof source !== 'string') {
    args = source;
    source = './';
  }
  checkVersion();
  var fstat, cwd = process.cwd(), nmstat;
  source = isAbsPath(source) ? source : path.join(cwd, source);

  try {
    fstat = fs.statSync(source);
  } catch (e) {
    console.log('source not found', e);
    return;
  }

  if (fstat.isDirectory()) {
    //找index执行
    var mainUrl = path.join(source, '/index.js');
    var configUrl = path.join(source, '/package.json');
    try {
      fstat = fs.statSync(mainUrl);
      fstat = fs.statSync(configUrl);
    } catch (e) {
      console.log('source not found', e);
      return;
    }


    nmstat = fs.stat(path.join(__dirname, '../static/node_modules'), function (err, status) {
      if (err) {
        childProcess.execSync('ln -s ' + path.join(__dirname, '../node_modules') + ' ' + path.join(__dirname, '../static/node_modules'))
      }
    });

    app.engine('.html', ejs.renderFile);
    app.set('views', path.join(__dirname, '../view'));
    app.set('view cache', false);
    app.set('view engine', 'html');
    partials.register('.html', ejs.render);
    app.set('x-powered-by', false);
    app.use(partials());
    app.use(bodyParser.json({ strict: true }));
    app.use(bodyParser.urlencoded({ extended: true }));
    app.use(multer({limits:
      {
        fileSize: 3*1024*1024,
        files: 1
      }
    }).single('file'));

    var router = require('./router')(ex.Router(), source);
    app.use(router);

    app.use('/__static__', mw.cubeAdmin);
    app.use('/', function (req, res, next) {
      return mw.cubeUser(source)(req, res, next);
    })

    app.use(function (req, res) {
      res.status(404).end('Not Found');
    });

    app.listen(args.port || 1111, function (err) {
      if (err) {
        console.log(err)
        return
      }
    })
    if (!args.silent) {
      try {
        childProcess.execSync('open http://localhost:' + (args.port || 1111));
      } catch (e) {
        console.log('请在浏览器打开：', 'http://localhost:' + (args.port || 1111));
      }
    }
  } else {
    console.log('unknow type input source', source);
  }
}


