/**!
 * Copyright(c) Alibaba Group Holding Limited.
 *
 * Authors:
 *   米尔 <mier.xcy@alibaba-inc.com> 
 */

'use strict';

var inquirer = require("inquirer");
var fs = require('fs');
var co = require('co');
var colors = require('colors');
var shelljs = require('shelljs');
var Path = require('path');
var process = require('process');
var semver = require('semver');
var packageJSON = require('../package.json');

function upper(str) {//首字母大写
  var char = str[0];
  return str.replace(char, char.toUpperCase());
}

function getComName(name) {//名称转换， 如 map3d-scatter -> Map3dScatter
  name = name.replace('_', '-');
  name = name.split('-');
  return name.map(upper).join('');
}

module.exports = function () {
  shelljs.config.verbose = true;
  shelljs.config.silent = true;

  var componentMap = null;
  var componentList = [];
  var selectedComType = null;

  function checkConfigVersion(version) {//检查远程配置项所需的版本号是否与本地版本号符合
    return semver.satisfies(packageJSON.version, version);
  }

  function npmInstall(comType){//安装一些必要的模块
    var extra = selectedComType['extra-install']
    if (extra && extra.length) {
      for (var i = 0; i < extra.length; i++) {
        shelljs.exec(extra[i]);
      }
    }
  }

  function createDirForCom(answers, newProject) {
    var err = fs.mkdirSync('./' + answers.comName);
    if (!err) {
      process.chdir('./' + answers.comName);
      fetchMaliangComsSampleFiles(answers, function () {
        shelljs.config.silent = false;
        shelljs.exec('npm install');
        npmInstall();
        shelljs.config.verbose = false;
        console.log(colors.green('组件创建完毕'));
      });
    }
  }

  function fetchMaliangComsSampleFiles(answers, callback) {
    __download(answers, '', function () {
      console.log(colors.green('组件样本下载完毕'));
      callback && callback();
    });
  }
  
  function __download(answers, path, callback) {
    var comName = answers.comName;
    var repository = Path.join(__dirname, selectedComType.url);
    var dirPath = Path.join('.', path);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath);
    }

    co(function* () {
      fs.readdir(repository, function (err, list) {
        if (err || list.length < 1) {console.log(repository, '下没有东西'); return;}
        list.forEach(function (filename) {
          if (Path.basename(filename) == '.git') {
            return true;
          }
          console.log('downloading: ', filename);
          var url;
          try {
            url = Path.join(repository, filename);
            //todo: if url is directory
            var file = fs.readFileSync(url);
            if (file) {
              var content = file.toString('utf8');
              if (Path.basename(filename) == 'package.json') {
                try {
                  var contentJSON = JSON.parse(content);
                  contentJSON['version'] = '0.0.1';
                  content = JSON.stringify(contentJSON, null, 2);
                } catch (e) {
                  console.log(e)
                  showError(item.name + ' 解析 JSON 失败');
                }
              }

              content = content.replace(/{comName}/g, comName);
              content = content.replace(/{comCnName}/g, answers.comCnName);
              content = content.replace(/{comDesc}/g, answers.comDesc);
              content = content.replace(/{username}/g, answers.username);
              content = content.replace(/{ComName}/g, getComName(comName));

              var index = url.indexOf(selectedComType.url);
              console.log('write:', Path.join('.', url.substring(index + selectedComType.url.length)));
              fs.writeFileSync(Path.join('.', url.substring(index + selectedComType.url.length)), content);
            }
          } catch(e) {
            console.log(e);
          }
        });
        callback && callback();
      })
    })
  }

  function fetchConfigOfComponents(callback) {
    console.log('获取远程组件创建列表中......');
    var file = require('./config/config_list_components.json');
    if (file) {
      componentMap = file;
      callback && callback();
    } else {
      showError('获取远程组件列表失败');
    }
  }

  function showQuestions() {
    var questions = [
      {
        type: "input",
        name: "comName",
        message: "请输入组件名(字母, -, 数字)",
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          if (/_/.test(value)) {
            return '不允许存在下划线';
          }

          if (fs.existsSync(value)) {
            return '该组件目录本地已存在！';
          }
          return true;
        }
      },
      {
        type: "input",
        name: "comCnName",
        message: "请输入组件中文名",
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          return true;
        }
      },
      {
        type: "input",
        name: "comDesc",
        message: "请输入组件描述",
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          return true;
        }
      },
      {
        type: 'list',
        name: 'comType',
        message: '请选择组件类型',
        choices: componentList
      }
    ];

    inquirer.prompt(questions, function (answers) {
      selectedComType = componentMap['list'][answers.comType];
      createDirForCom(answers, null);
    });
  }

  fetchConfigOfComponents(function () {
    if (componentMap['maliang-version'] && !checkConfigVersion(componentMap['maliang-version'])) {
      showError('远程组件列表要求 maliang 版本号为' + componentMap['maliang-version'] + ', 请更新版本或联系管理猿');
      return;
    }
    for (var key in componentMap['list']) {
      componentList.push(key);
    }
    showQuestions();
  })
}

function showError(text) {
  console.log(colors.red('!! ' + text));
}



