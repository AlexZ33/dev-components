/**
 * Created by elvira on 16/4/7.
 */
var path = require('path');
var fs = require('fs');
var Utils = require('bcore/utils');
var Parse = require('./utils/parse');
var Read = require('./utils/read');
var shelljs = require('shelljs');
var md5 = require('md5');
var co = require('co');

function write(path, json) {
  fs.writeFileSync(path, JSON.stringify(json, null, 2), 'utf8');
}

function end(code, str, data) {
  var res = {
    data: data
  }
  if (code === 1) {
    res.code = code;
    res.isError = false;
    res.message = str || 'success';
  } else {
    res.code = code;
    res.isError = true;
    res.message = str || 'error';
  }
  return JSON.stringify(res);
}

module.exports = function (router, source) {
  var configUrl = path.join(source, '/package.json');

  router.get('/', function (req, res, next) {
    res.redirect('/index.html');
  });

  router.get('/index.html', function (req, res, next) {
    var config = Read.file(configUrl, res);
    var datav = Parse.convertDatav(config.datav, res, source);
    // console.log('======== source ', source)
    // console.log('======== datav ', datav)
    
    var childrenList = [];
    try {
      var childrenUrl = path.join(source, '/children');
      var childrenDir = fs.readdirSync(childrenUrl);
      if (childrenDir && childrenDir.length) {
        childrenDir.forEach(function (_dir) {
          var _childrenUrl = path.join(childrenUrl, _dir);
          if (fs.statSync(_childrenUrl).isDirectory()) {
            var _childrenConfig = Read.file(path.join(_childrenUrl, 'package.json'));
            // console.log(_childrenConfig)
            var _datav = Parse.convertDatav(_childrenConfig.datav, res, _childrenUrl);
            // console.log('==== child datav', _datav)
            childrenList.push({
              _dir: _dir,
              name: _childrenConfig.name,
              version: _childrenConfig.version,
              datav: _datav
            });
          }
        });
      }
    } catch (e) {
      console.error(e)
    }

    // var coms = convertComs(coms, comsBase, res);
    // datav.coms = coms;
    res.render('index.html', {
      source: 'index.js',
      datav: JSON.stringify(datav),
      version: config.version,
      childrenList: childrenList || null
    });
  });

  router.get('/lib', function (req, res, next) {
    res.render('library.html');
  })

  router.post('/libcreate', function (req, res, next) {
    try {
      createLib(req.body);
      res.end(end(1, "sync successed!"));
    } catch(e) {
      res.end(end(0, e.toString()));
    }
  })

  router.post('/publish', function (req, res, next) {
    var config = Read.file(configUrl, res);
    var data = req.body;
    config.datav.view = data.view;
    config.datav.type = [data.type];
    //z-index
    if (data.type.indexOf('map_') === 0) {
      data.view['z-index'] = 10;
    } else if (data.type === 'decorate') {
      data.view['z-index'] = 110;
    } else {
      data.view['z-index'] = 1010;
    }
    config.version = data.version;
    if(config.datav.icon) {
      config.datav.icon = data.icon;
    }

    if (config.datav.protocol >= 2) {            //为handler fold 位置修改的兼容代码
      Parse.fixConfig(config.datav.config);
    }
    write(configUrl, config);
    res.end(end(1, "sync successed!"));
  });

  router.post('/config_save', function (req, res, next) {
    var config = Read.file(configUrl, res);
    var data = req.body;
    data = JSON.parse(data.config);
    try {
      Parse.convert2Datav(data, config.datav);
      write(configUrl, config);
      res.end(end(1, "sync successed!"));
    } catch (e) {
      res.end(end(0, e.toString()));
    }
  });

  router.post('/child_config_save/:dir', function (req, res, next) {
    var _dir = req.params.dir;
    var configUrl = path.join(source, 'children', _dir, 'package.json');
    console.log(configUrl)
    var config = Read.file(configUrl);
// console.log(config);
// return;
    var data = req.body;
    data = JSON.parse(data.config);
    try {
      Parse.convert2Datav(data, config.datav);
      write(configUrl, config);
      res.end(end(1, "sync successed!"));
    } catch (e) {
      res.end(end(0, e.toString()));
    }
  });


  router.post('/data_save', function (req, res, next) {
    var config = Read.file(configUrl, res);
    var data = req.body;
    if (!data || !config || !config.datav) {
      res.end(end(0, "error: there is no data"));
    } else {
      var api_data = config.datav.api_data;
      for(var k in api_data) {
        var api = api_data[k];
        if (typeof api === 'string') {
          if (JSON.stringify(data[k]).length > 512*1024) {
            res.end(end(0, "长度大于512KB"));
          }
          write(path.join(source, api), data[k]);
        } else {
          if (JSON.stringify(data[k]).length > 6*1024) {
            res.end(end(0, "长度大于6KB"));
          }
          api_data[k] = data[k];
        }
      }
      write(configUrl, config);
      res.end(end(1, "sync successed!"));
    }
  });

  router.post('/child_data_save/:dir', function (req, res, next) {
    var _dir = req.params.dir;
    var configUrl = path.join(source, 'children', _dir, 'package.json');
    console.log(configUrl)
    var config = Read.file(configUrl, res);
    var data = req.body;
    if (!data || !config || !config.datav) {
      res.end(end(0, "error: there is no data"));
    } else {
      var api_data = config.datav.api_data;
      for(var k in api_data) {
        var api = api_data[k];
        if (typeof api === 'string') {
          if (JSON.stringify(data[k]).length > 512*1024) {
            res.end(end(0, "长度大于512KB"));
          }
          write(path.join(source, 'children', _dir, api), data[k]);
        } else {
          if (JSON.stringify(data[k]).length > 6*1024) {
            res.end(end(0, "长度大于6KB"));
          }
          api_data[k] = data[k];
        }
      }
      write(configUrl, config);
      res.end(end(1, "sync successed!"));
    }
  });


  router.post('/cnname_save', function (req, res, next) {
    var config = Read.file(configUrl, res);
    var data = req.body;
    if (!data || !config || !config.datav) {
      res.end(end(0, "error: there is no data"));
    } else {
      config.datav['cn_name'] = data.name;
      write(configUrl, config);
      res.end(end(1, "sync successed!"));
    }
  });

  return router;
}