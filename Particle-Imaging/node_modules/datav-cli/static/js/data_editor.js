var editors = {};
var active;
var $ = require('jquery');
var JSONEditor = require('../lib/jsoneditor.min.js');

require('../lib/jsoneditor.min.css');
require('../css/editor.css');

/************* datav 数据 ***************/
var datav = window.share.datav;
var apis = datav.apis;
var validate = datav.validate;
var duration = 300;
/************* datav 数据 ***************/
var parentComContainer;

function convert2Apis(data) {
  apis[active].default = data;
  return true;
}

function getAllData() {
  var res = {};
  _.forIn(apis, function (obj, key) {
    res[key] = obj.default;
  })
  return res;
}

function validateApi(data) {
  var flag = true;
  data = data && data[0] || {};
  _.forIn(apis[active].fields, function (no, nk) {
    var dom = parentComContainer.find('.data-editor-field-' + nk + ' ol:last-child');
    if (no.optional) {
      dom.html('可选字段')
    } else  if (_.has(data, nk)) { 
       dom.html('匹配完成')
      } else { 
       flag = false;   dom.html('匹配未完成') 
     }
  })
  if (flag) {
    parentComContainer.find('.data-editor-line-' + active + ' .data-editor-status').removeClass('failed').addClass('success').html('匹配完成')
  } else {
    parentComContainer.find('.data-editor-line-' + active + ' .data-editor-status').removeClass('success').addClass('failed').html('匹配未完成')
  }
  return flag;
}

module.exports = function (container) {
  var field = _.template('<div class="data-editor-field-<%= field %>"><ol><%= field %></ol><ol><%= des %></ol><ol><%= status %></ol></div>');
  var line = _.template('<li class="data-editor-line data-editor-line-<%= name %> <%= active %>" data-api="<%= name %>"><ol><%= name %></ol><ol><%= des %></ol><ol class="data-editor-status <%= status %>"><%= statusName %></ol>' +
    '<div class="data-editor-field"><div><ol>字段</ol><ol>说明</ol><ol>状态</ol></div><%= field %></div>' +
    '<div class="data-editor-data">JSON数据<div class="data-editor-json"></div></div></li>')

  var childComContainer = $('<div/>');
  container.html(childComContainer);
  window.share.childrenComManager.addToDataEditor(childComContainer);

  parentComContainer = $('<div id="parent-data-editor"></div>');
  container.append(parentComContainer);

  if (!apis || _.isEmpty(apis)) {
    parentComContainer.html('<ul class="data-editor-ul"><li style="text-align: center">无API</li></ul>')
  } else {
    var str = '<ul class="data-editor-ul">' +
      '<li><ol>接口</ol><ol>说明</ol><ol>状态</ol></li>';
    var i = 0;
    _.forIn(apis, function (obj, key) {
      var fieldStr = '';
      if (i===0) {active = key;}
      var data = obj.default;
      var flag = true;
      data = data && data[0] || {};
      _.forIn(obj.fields, function (no, nk) {
        var tmpF = -1;
        if (no.optional) {tmpF = 0;} else if (_.has(data, nk)) {tmpF = 1;} else {flag = false;}
        fieldStr += field({
          field: nk,
          des: no.description,
          status: tmpF && '配置完成' || ((tmpF === 0) && '可选字段') || '配置未完成'
        })
      })
      str += line({
        active: i===0?'active':'',
        name: key,
        des: obj['description'],
        status: flag && 'success' || 'failed',
        statusName: flag && '配置完成' || '配置未完成',
        field: fieldStr
      })
      i++;
    })
    str += '</ul>';
    parentComContainer.html(str);
    var options = {
      mode: 'code',
      onChange: function () {
        if (editor && validateApi(!_.isEmpty(editor.getText()) && editor.get() || null)) {
          convert2Apis(editor.get()) && render(chart, apis);
        }
      }
    };
    var con = parentComContainer.find('li.active .data-editor-json');
    var editor = new JSONEditor(con[0], options);
    editor.set(apis[active].default);
    editors[active] = editor;
    parentComContainer.find(".active .data-editor-field").slideDown(duration)
    parentComContainer.find(".active .data-editor-data").slideDown(duration)
    setTimeout(function () {
      var i = 0;
      _.forIn(apis, function (obj, key) {
        if (i===0) {
          i++;
          return true;
        }
        var con = parentComContainer.find('li .data-editor-json');
        var editor = new JSONEditor(con[i], {
          mode: 'code',
          onChange: function () {
            if (editor && validateApi(!_.isEmpty(editor.getText()) && editor.get() || null)) {
              convert2Apis(editor.get()) && render(chart, apis);
            }
          }
        });
        editor.set(apis[key].default)
        editors[key] = editor;
        i++;
      });
    }, 30);
    parentComContainer.append('<div class="data-content-line content-line"><botton id="data-btn" class="content-btn">一键同步</botton></div>');
  }

  parentComContainer.find('.data-editor-line > ol').on('click', function () {
    var that = $(this).parent();
    if (that.is('.active')) {
      that.find('.data-editor-field').slideUp(duration);
      that.find('.data-editor-data').slideUp(duration);
      that.removeClass('active');
    } else {
      var actDom = parentComContainer.find('.data-editor-line.active');
      that.find('.data-editor-field').slideDown(duration);
      that.find('.data-editor-data').slideDown(duration);
      active = that.data('api');
      actDom.find('.data-editor-field').slideUp(duration);
      actDom.find('.data-editor-data').slideUp(duration);
      actDom.removeClass('active');
      that.addClass('active');
    }
  });

  var data_btn = parentComContainer.find('#data-btn');
  data_btn.on('click', function () {
    if (editors === {}) {alert('editor error'); return}
    var self = this;
    $(this).html('<image src="/__static__/iconfont/load.svg"></image>');
    $.post('/data_save', getAllData(), function (data) {
      $(self).html('一键同步');
      data = JSON.parse(data);
      if (data.isError) {
        alert('同步失败:' + data.message);
      } else {
        alert('同步成功!');
      }
    })
  });
}