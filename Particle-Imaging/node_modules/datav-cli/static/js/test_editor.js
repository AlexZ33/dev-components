var $ = require('jquery');
var _ = require('lodash');

/************* datav 数据 ***************/
var datav = window.share.datav;
var config = datav.config;
var apis = datav.apis;
/************* datav 数据 ***************/

function TestConsole(selector) {
  this.con = $(selector);
  this.color = {
    error: '#FA6831',
    warm: '#FF9500'
  }
}
TestConsole.prototype = {
  println: function (str, color) {
    this.con.append('<p ' + (color ? 'style=\"color:' + this.color[color] + ';\"' || color : '') + ' >' + str + '</p>').animate({scrollTop: this.con[0].scrollHeight}, 200);
  }
}

var testBtns = [
  {
    name : '测试空',
    id: 'test-null',
    data: null
  },
  {
    name : '测试空数组',
    id: 'test-empty-arr',
    data: []
  }
]

function transApiData(data) {
  var res = {};
  _.forIn(apis, function (obj, key) {
    res[key] = {};
    res[key].default = data;
    res[key].handler = obj.handler;
  })
  return res;
}

module.exports = function (container) {
  container.css('text-indent', '1em')
  container.html('<div style="background: #FF9500;font-size: .8em;">同步渲染耗时: ' + time + 'ms</div>' +
    '<div>数据测试 </div>');
  var btnStr = '<div class="test-data-btns">';
  _.forIn(testBtns, function (btn) {
    btnStr += '<button id="' + btn.id + '" class="test-btn" data-data="' + btn.data + '">' + btn.name + '</button>'
  })
  btnStr += '</div><div id="test-console"></div>';
  container.append(btnStr);
  var tc = new TestConsole('#test-console')
  tc.println('控制台:')
  var running = false;
  $('.test-btn').on('click', function () {
    if (running) {
      tc.println('命令正在执行中...请稍后再发起新的命令...');
      return
    }
    running = true;
    var that = $(this);
    tc.println('<span style="color:#3EE8FF;">' + that.html() + '</span> 命令正在执行中...');
    tc.println('-----------------------渲染开始-------------------------');
    var id = Math.random().toString(36).substr(2);
    tc.println('<div class="' + id + '" style="height: 226px; outline: 1px dashed #FF9500;position:relative; overflow: hidden;" title="你就长这样？"></div>')
    var cfg = _.clone(config);
    cfg.apis = _.clone(apis);
    var waste, count = 0;
    try {
      var time1 = new Date();
      var chart = new Chart('.'+ id, cfg);
      render(chart, transApiData(that.data('data')))
      waste = new Date() - time1;
      tc.println('-----------------------渲染完毕-------------------------');
    } catch (e) {
      console.warn(e);
      console.error(e.stack);
      tc.println(e.stack, 'error');
      count++;
    } finally {
      tc.println('同步渲染共出错: ' + count + '次', 'error');
      tc.println('同步渲染耗时: ' + (_.isNumber(waste) && waste + 'ms' || '出错未渲染完成'), 'warm');
      running = false;
    }
  })
}