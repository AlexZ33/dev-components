var $ = require('jquery');
var _ = require('lodash');
var React = require('react');
var Store = require('./store');
var Action = require('./action');
var Reflux = require('../lib/reflux');

require('../css/test-editor.less');

var testBtns = [
  {
    name : '测试空',
    id: 'test-null',
    data: null
  },
  {
    name : '测试空数组',
    id: 'test-empty-arr',
    data: []
  }
]


var Tester = React.createClass({
  mixins: [Reflux.connect(Store)],
  render: function () {
    var self = this;
    var btns = [];
    _.forIn(testBtns, function (btn) {
      btns.push(<button id={btn.id} className="test-btn" onClick={self._test(btn.data)} key={btn.id}>{btn.name}</button>);
    })

    if (!this.tc) {
      this.tc = new TestConsole('#test-console');
    }

    return (<div className="test-editor">
      <div className="time-cost">
        同步渲染耗时: {window.time} ms
      </div>
      <div>数据测试 </div>
      <div className="test-data-btns">
        {btns}
      </div>
      <div id="test-console"></div>
    </div>)
  },
  _test: function (data) {
    var self = this;
    return function (event) {
      //test
      if (self.running) {
        self.tc.println('命令正在执行中...请稍后再发起新的命令...');
        return;
      }

      self.running = true;
      var that = $(event.target);
      var tc = self.tc;

      tc.println('<span style="color:#3EE8FF;">' + that.html() + '</span> 命令正在执行中...');
      tc.println('-----------------------渲染开始-------------------------');
      var id = Math.random().toString(36).substr(2);
      tc.println('<div class="' + id + '" style="height: 226px; outline: 1px dashed #FF9500;position:relative; overflow: hidden;" title="你就长这样？"></div>')
      var cfg = _.clone(window.share.datav.config);
      cfg.apis = _.clone(window.share.datav.apis);
      var waste, count = 0;
      try {
        var time1 = new Date();
        var chart = new window.Chart('.'+ id, cfg);
        window.render(chart, transApiData(window.share.datav.apis, data))
        waste = new Date() - time1;
        tc.println('-----------------------渲染完毕-------------------------');
      } catch (e) {
        console.warn(e);
        console.error(e.stack);
        tc.println(e.stack, 'error');
        count++;
      } finally {
        tc.println('同步渲染共出错: ' + count + '次', 'error');
        tc.println('同步渲染耗时: ' + (_.isNumber(waste) && waste + 'ms' || '出错未渲染完成'), 'warm');
        self.running = false;
      }
    }
  }
});

module.exports = Tester;

function transApiData(apis, data) {
  var res = {};
  _.forIn(apis, function (obj, key) {
    res[key] = {};
    res[key].default = data;
    res[key].handler = obj.handler;
  })
  return res;
}

function TestConsole(selector) {
  this.selector = selector;
  this.color = {
    error: '#FA6831',
    warm: '#FF9500'
  }
}
TestConsole.prototype = {
  println: function (str, color) {
    var con = $(this.selector);
    con.append('<p ' + (color ? 'style=\"color:' + this.color[color] + ';\"' || color : '') + ' >' + str + '</p>').animate({scrollTop: con[0].scrollHeight}, 200);
  }
}
