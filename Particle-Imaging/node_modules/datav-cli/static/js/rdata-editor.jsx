var React = require('react');
var _ = require('lodash');
var $ = require('jquery');
var Store = require('./store');
var Action = require('./action');
var Reflux = require('../lib/reflux');
var BreadCrumb = require('./rbreadcrumb');
var ChildrenManager = require('/react-maliang-editor').ChildrenManager;

//data-editor
require('../css/data-editor.less');
var AceEditor = require('../lib/ace.jsx').default;
var jsonFormat = require('../lib/json-format');
require('brace/mode/json');
require('brace/theme/idle_fingers');

/**** DataEditor *****/
var DataEditor = React.createClass({
  mixins: [Reflux.connect(Store)],
  getInitialState: function () {
    return {
      activeIndex: 0,
      syncing: false
    }
  },
  render: function () {
    var self = this;
    var apis = this.state.selectedComApis;
    var apisData = this.state.selectedComApisData;

    if (!apis || _.isEmpty(apis)) {
      return (<div>
        <BreadCrumb />
        {
          !this.state.selectedComId && !_.isEmpty(this.state.childrenIds) ? <ChildrenManager children={this.state.childrenIds} type="simple" editChild={this.editChild} /> : null
        }
        <div style={{
        'textAlign': 'center',
        'padding': '30px 0'
      }}>对方没有 API， 并朝你放了个屁</div>
        <div style={{
          'textAlign': 'center'
        }}>
        <img src="https://gw.alicdn.com/tps/TB1jPrhPXXXXXcOXpXXXXXXXXXX-694-1036.png" width="90%" />
        </div>
      </div>);
    }

    var apisHtml = [];
    apisHtml.push();
    var activeIndex = this.props.activeIndex;

    var i = 0;
    _.forIn(apis, function (obj, key) {
      var field = [];
      var data = apisData[key]; //obj.default;
      var flag = true;
      data = data && data[0] || {};

      var active = i == self.state.activeIndex;

      if (active) {
        _.forIn(obj.fields, function (no, nk) {
          var tmpF = -1;
          if (no.optional) {tmpF = 0;} else if (_.has(data, nk)) {tmpF = 1;} else {flag = false;}
          field.push(<tr className="data-editor-field-<%= field %>" key={nk}>
            <td>{nk}</td>
            <td>{no.description}</td>
            <td><span className={'data-editor-status ' + (flag && 'success' || 'failed')}>{tmpF && '配置完成' || ((tmpF === 0) && '可选字段') || '配置未完成'}</span></td>
          </tr>)
        })
      }

      apisHtml.push(<li className={'data-editor-line data-editor-line-' + name + (active ? ' active' : '')} data-api={name} key={key} >
          <ol className="api-info" onClick={self.selectApi(i)}>{active ? <i className="datav-icon">&#xe641;</i> : <i className="datav-icon">&#xe64b;</i>}{key}</ol>
          <ol className="api-info" onClick={self.selectApi(i)}>{obj['description']}</ol>
          <ol onClick={self.selectApi(i)}><span className={'api-info data-editor-status ' + (flag && 'success' || 'failed')}>{flag && '配置完成' || '配置未完成'}</span></ol>
          {active ? 
            <div>
              <div className="data-editor-field">
                <table>
                  <thead>
                    <tr>
                      <th className="api-field">字段</th>
                      <th className="api-field">说明</th>
                      <th className="api-field">状态</th>
                    </tr>
                  </thead>
                  <tbody>
                    {field}
                  </tbody>
                </table>
              </div>
              <div className="data-editor-data">
                <div className="data-editor-json">
                  <AceEditor
                    name={key}
                    mode="json"
                    theme="idle_fingers"
                    width="100%"
                    height="325px"
                    fontSize={11}
                    tabSize={2}
                    highlightActiveLine={false}
                    showGutter={true}
                    onBlur={self.updateData(obj, key)}
                    value={jsonFormat(JSON.stringify(apisData[key]))}
                    editorProps={{$blockScrolling: true}}
                    onChange={self.change}
                    />
                </div>
              </div>
            </div>
            : null
          }
        </li>);
      i++;
    })

    return (
    <div>
      <BreadCrumb />
      <ul className="data-editor-ul">
        <li>
          <ol className="api-info">接口</ol>
          <ol className="api-info">说明</ol>
          <ol className="api-info">状态</ol>
        </li>
        {apisHtml}
        <div className="sync">
          <button className={'sync-button ' + (this.state.syncing ? 'syncing' : '')} onClick={this.sync}>一键同步{this.state.syncing ? '...' : ''}</button>
        </div>
      </ul>
    </div>);
  },
  selectApi: function (index) {
    var self = this;
    return function () {
      if (index == self.state.activeIndex) return;

      self.setState({
        activeIndex: index
      });
    }
  },
  updateData: function (apiObj, apiName) {
    var self = this;
    return function () {
      if (!self.data) return;

      try {
        var data = JSON.parse(self.data);
        Action.updateData(self.state, data, apiObj, apiName);
      } catch (e) {
        console.error('json 格式错误', self.data);
      }
    }
  },
  change: function (data) {
    this.data = data;
  },
  sync: function () {
    var self = this;
    if (this.state.syncing) return;
    

    if (this.state.selectedComId) {
      $.post('/child_data_save/' + this.state.selectedComInfo.dir, self.getAllData(), function (data) {
        data = JSON.parse(data);
        if (data.isError) {
          alert('同步失败:' + data.message);
        } else {
          alert('同步成功!');
        }
        self.setState({
          syncing: false
        });
      });
    } else {
      $.post('/data_save', self.getAllData(), function (data) {
        data = JSON.parse(data);
        if (data.isError) {
          alert('同步失败:' + data.message);
        } else {
          alert('同步成功!');
        }
        self.setState({
          syncing: false
        });
      });
    }
    
    self.setState({
      syncing: true
    });
  },
  getAllData: function () {
    var res = {};
    var self = this;
    _.forIn(this.state.selectedComApis, function (obj, key) {
      res[key] = self.state.selectedComApisData[key];
    });
    return res;
  },
  editChild: function (comId) {
    Action.selectChild(this.state, comId);
  }
})

module.exports = DataEditor;