#!/usr/bin/env node

"use strict"

var chalk = require('chalk');
var cmd = require('commander');
var config = require('../package.json');
var version = require('../libs/utils/check-version');
var path = require('path');
var log = require('../libs/utils/log');
var fs = require('fs');
var _ = require('lodash');

const logo =
`                                                                             
                                                                             
          ___           ___           ___           ___           ___        
         /\\  \\         /\\  \\         /\\  \\         /\\  \\         /\\__\\       
        /::\\  \\       /::\\  \\        \\:\\  \\       /::\\  \\       /:/  /       
       /:/\\:\\  \\     /:/\\:\\  \\        \\:\\  \\     /:/\\:\\  \\     /:/  /        
      /:/  \\:\\__\\   /::\\~\\:\\  \\       /::\\  \\   /::\\~\\:\\  \\   /:/__/  ___    
     /:/__/ \\:|__| /:/\\:\\ \\:\\__\\     /:/\\:\\__\\ /:/\\:\\ \\:\\__\\  |:|  | /\\__\\   
     \\:\\  \\ /:/  / \\/__\\:\\/:/  /    /:/  \\/__/ \\/__\\:\\/:/  /  |:|  |/:/  /   
      \\:\\  /:/  /       \\::/  /    /:/  /           \\::/  /   |:|__/:/  /    
       \\:\\/:/  /        /:/  /     \\/__/            /:/  /     \\::::/__/     
        \\::/__/        /:/  /                      /:/  /       ~~~~         
         ~~            \\/__/                       \\/__/                     
                                                                             
                                                                             

`;

console.log(chalk.cyan(logo));
console.log('如果您感觉检查版本号非常慢，建议您配置npm镜像: npm config set registry http://registry.cnpmjs.org, 也可以使用您自己喜欢的镜像.')

config = _.merge(config, require('../config'));

let COMMANDMAP = {
  preview: require('../libs/preview'),     //预览
  comInit: require('../libs/init'),        //初始化
  login:   require('../libs/login'),       //登录
  publish: require('../libs/publish'),     //发布
  package: require('../libs/package'),     //打包
}

function exec(command, ...args) {
  log.debugModeSwitch(args[0].debug);
  version(config, function () {
    COMMANDMAP[command](config, ...args);
  })
}

function list(val) {
  return val.split(',');
}

cmd
  .usage('[options] <folder|file...>')
  .version(config.version)
  .description('DataV开发工具')
  .option('-v --verbose', 'increase verbosity')
  .option('-E --exclude <items>', 'exclude file or folder', list)

cmd.command('set-key')
  .description('set-key with you username and token in the datav.aliyun.com')
  .option('-d --debug', 'debug mode')
  .action((...args) => exec('login', ...args))

cmd.command('init')
  .description('init com for datav-coms')
  .option('-d --debug', 'debug mode')
  .action((...args) => exec('comInit', ...args))

cmd
  .command('start')
  .alias('run')
  .option('-p --port [value]', 'custom server port')
  .option('-s --silent', 'keep silent')
  .option('-l --local', 'use local remote')
  .option('-d --debug', 'debug mode')
  .description('start service for preview component')
  .action((...args) => exec('preview', ...args))

cmd
  .command('publish')
  .alias('pbl')
  .option('--region [value]', 'different component center region, you can --region inner , default is chn')
  .option('-d --debug', 'debug mode')
  .description('publish component')
  .action((...args) => exec('publish', ...args))

cmd
  .command('package')
  .alias('pack')
  .option('-d --debug', 'debug mode')
  .description('package component')
  .action((...args) => exec('package', ...args))

cmd.command('help')
  .description('help')
  .action(() => cmd.help());

cmd.command('latest')
  .description('check ' + config.name + ' latest version')
  .action(() => version(config));

cmd.version('v' + config.version);

cmd.parse(process.argv);

if (!cmd.args.length) {
  cmd.help();
}

let cacheDir = path.join(config.root, config.cacheDir);
if (!fs.existsSync(cacheDir)) {
  fs.mkdirSync(cacheDir);
}