'use strict';
var path = require('path');
var fs = require('fs');
var Utils = require('../utils');
var Parse = require('../utils/parse');
var Read = require('../utils/read');
var shelljs = require('shelljs');
var md5 = require('md5');
var co = require('co');
var log = require('../utils/log');

function write(path, json) {
  return fs.writeFileSync(path, JSON.stringify(json, null, 2), 'utf8');
}

function end(code, str, data) {
  var res = {
    data: data
  }
  if (code === 1) {
    res.code = code;
    res.isError = false;
    res.message = str || 'success';
  } else {
    res.code = code;
    res.isError = true;
    res.message = str || 'error';
  }
  return JSON.stringify(res);
}

module.exports = function (router, source, sysConfig) {
  var configUrl = path.join(source, '/package.json');

  router.get('/', function (req, res, next) {
    res.redirect('/index.html');
  });

  router.get('/index.html', function (req, res, next) {
    var config = Read.file(configUrl, res);
    var datav = Parse.convertDatav(config.datav, res, source);
    
    if (datav.children) {
      var childrenList = [];
      try {
        var childrenUrl = path.join(source, '/children');
        var childrenDir = fs.readdirSync(childrenUrl);
        if (childrenDir && childrenDir.length) {
          childrenDir.forEach(function (_dir) {
            var _childrenUrl = path.join(childrenUrl, _dir);
            if (fs.statSync(_childrenUrl).isDirectory()) {
              var _childrenConfig = Read.file(path.join(_childrenUrl, 'package.json'));
              // console.log(_childrenConfig)
              var _datav = Parse.convertDatav(_childrenConfig.datav, res, _childrenUrl);
              // console.log('==== child datav', _datav)
              childrenList.push({
                _dir: _dir,
                name: _childrenConfig.name,
                version: _childrenConfig.version,
                datav: _datav
              });
            }
          });
        }
      } catch (e) {
        console.error(e)
      }
    }

    // var coms = convertComs(coms, comsBase, res);
    // datav.coms = coms;
    res.render('index.html', {
      source: 'index.js',
      datav: JSON.stringify(datav),
      version: config.version,
      childrenList: childrenList || null
    });
  });

  router.post('/publish', function (req, res, next) {
    var config = Read.file(configUrl, res);
    var data = req.body;
    config.datav.view = data.view;

    if (data.type === '' || !data.type) {
      res.end(end(0, '组件类型选择错误'));
    } 
    config.datav.type = [data.type];
    //fix z-index
    if (data.type.indexOf('map_') === 0) {
      data.view['z-index'] = 10;
    } else if (data.type === 'decorate') {
      data.view['z-index'] = 110;
    } else {
      data.view['z-index'] = 1010;
    }

    config.version = data.version;
    if (data.icon) {
      if (typeof config.datav.icon !== 'object') {
        if (config.datav.icon === '') {
          config.datav.icon = {}
        } else {
          config.datav.icon = {
            default: config.datav.icon
          }
        }
      }
      config.datav.icon['316x238'] = data.icon;
    }

    if (config.datav.protocol >= 2) {            //为handler fold 位置修改的兼容代码
      Parse.fixConfig(config.datav.config);
    }

    write(configUrl, config);
    try {
      shelljs.config.verbose = false;
      shelljs.config.silent = true;
      shelljs.exec('datav pbl', {timeout: 1000 * 10}, function (code, stdout, stderr) {
        if (stdout.indexOf('upload successed') === -1) {
          log.warn(stdout);
          res.end(end(0, "publish fail"));
        } else {
          res.end(end(1, "publish successed!"));
        }
      });
    } catch (e) {
      res.end(end(0, e.toString()));
    }
  });

  function saveConfig(configUrl, req, res) {
    var config = Read.file(configUrl, res);
    var data = req.body;
    data = JSON.parse(data.config);
    try {
      Parse.convert2Datav(data, config.datav);
      write(configUrl, config);
      res.end(end(1, "sync successed!"));
    } catch (e) {
      res.end(end(0, e.toString()));
    }
  }

  router.post('/config_save', function (req, res, next) {
    saveConfig(configUrl, req, res);
  });

  router.post('/child_config_save/:dir', function (req, res, next) {
    var _dir = req.params.dir;
    var configUrl = path.join(source, 'children', _dir, 'package.json');

    saveConfig(configUrl, req, res);
  });


  function saveData(configUrl, req, res) {
    var config = Read.file(configUrl, res);
    var data = req.body;
    if (!data || !config || !config.datav) {
      res.end(end(0, "error: there is no data"));
    } else {
      var api_data = config.datav.api_data;
      for(var k in api_data) {
        var api = api_data[k];
        if (typeof api === 'string') {
          if (JSON.stringify(data[k]).length > 512*1024) {
            res.end(end(0, "长度大于512KB"));
          }
          write(path.join(source, api), data[k]);
        } else {
          if (JSON.stringify(data[k]).length > 6*1024) {
            res.end(end(0, "长度大于6KB"));
          }
          api_data[k] = data[k];
        }
      }
      write(configUrl, config);
      res.end(end(1, "sync successed!"));
    }
  }

  router.post('/data_save', function (req, res, next) {
    saveData(configUrl, req, res);
  });

  router.post('/child_data_save/:dir', function (req, res, next) {
    var _dir = req.params.dir;
    var configUrl = path.join(source, 'children', _dir, 'package.json');
    
    saveData(configUrl, req, res);
  });


  router.post('/cnname_save', function (req, res, next) {
    var config = Read.file(configUrl, res);
    var data = req.body;
    if (!data || !config || !config.datav) {
      res.end(end(0, "error: there is no data"));
    } else {
      config.datav['cn_name'] = data.name;
      write(configUrl, config);
      res.end(end(1, "sync successed!"));
    }
  });

  function saveResource(req, res, base, filenameFun, cb) {
    var data, filename;
    if (!req.file) {
      res.end(end(0, "error: there is no data"));
    } else {
      data = req.file.buffer;

      //图片大小限制
      if (data.length > 1024 * 1024) {
        res.end(end(0, "图片大于1mb"));
      }

      if (typeof filenameFun === 'function') {
        filename = filenameFun(req.file.originalname);
      } else if (typeof filenameFun === 'string') {
        filename = filenameFun;
      } else {
        filename = 'resource-' + Utils.randomWord(5) + path.extname(req.file.originalname);
      }
      var root = path.join(source, base);
      var filepath = path.join(root, filename);
      co(function* () {
        if (!fs.existsSync(root)) {
          fs.mkdirSync(root)
        }
        fs.writeFileSync(path.join(root, filename), data);
        cb && cb();
        res.end(JSON.stringify({
          code:1,
          file: filename + '?time=' + new Date().getTime(),
          isError: false,
          message:"sync successed!"
        }));
      }).catch(function (err) {
        log.err('resource save err: ', err.stack || err);
        res.end(end(0, err.toString()));
      })
    }
  }

  router.post('/resource_save', function (req, res, next) {
    saveResource(req, res, sysConfig.resourceDir)
  });

  router.post('/icon_save/:key', function (req, res, next) {
    var key = req.params.key || '316x238';
    saveResource(req, res, sysConfig.iconDir, key + 'icon.png', function () {
      let config = Read.file(configUrl, res);
      config.datav.icon = setIcon(config.datav.icon, key, path.join('icons', key + 'icon.png'));
      write(configUrl, config);
    })
  });

  return router;
}

function setIcon(iconObj, key, url) {
  var genIconObj = function (key, url) {
    let tmp = {};
    tmp[key] = url;
    return tmp;
  }

  if (!iconObj) {
    return genIconObj(key, url);
  }
  if (typeof iconObj === 'string') {
    let tmp = {};
    tmp.default = iconObj;
    tmp[key] = url;
    return tmp;
  }
  if (typeof iconObj === 'object') {
    iconObj[key] = url;
    return iconObj;
  }
  return genIconObj(key, url);
}