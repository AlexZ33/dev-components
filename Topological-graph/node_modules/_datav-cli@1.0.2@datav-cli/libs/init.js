'use strict';

var inquirer = require("inquirer");
var fs       = require('fs');
var shelljs  = require('shelljs');
var Path     = require('path');
var process  = require('process');
var semver   = require('semver');
var urllib   = require('urllib');
var log      = require('./utils/log');
var _        = require('lodash');
var unzip    = require('unzip');

module.exports = function (config, args, haha) {
  shelljs.config.verbose = true;
  shelljs.config.silent = true;

  var componentMap = null;
  var componentList = [];
  var selectedComType = null;

  function createDirForCom(answers, newProject) {
    log.debug('[3]创建组件目录阶段.');
    var err = fs.mkdirSync('./' + answers.comName);
    if (!err) {
      process.chdir('./' + answers.comName);
      return __download(answers).then(function () {
        shelljs.exec('npm install');
      })
    } else {
      throw '创建组件目录失败:' + (err.stack || err);
    }
  }

  function __download(answers) {
    log.debug('[4]下载组件目录阶段.')
    let name = answers.comTemplate.name.split('/');
    var repository = config.server + 'modules/examples/' + name[name.length-1] + '/' + answers.comTemplate.version;
    return urllib.request(repository).then(function (res) {
      if (!res || !res.data || !res.headers) throw '下载组件失败.';
      return res;
    }).then(function (data) {
      return new Promise((resolve) => {
        var filename = data.headers['content-disposition'].split('=')[1];
        var fileurl = Path.join(config.root, config.cacheDir, filename);
        fs.writeFileSync(fileurl, data.data);
        fs.createReadStream(fileurl).pipe(unzip.Parse())
          .on('entry', function (entry) {
            var fileName = entry.path;
            var comName = answers.comName;
            // var type = entry.type;    todo:增加文件夹处理
            // entry.pipe(fs.createWriteStream(Path.join('.', fileName)));
            entry.on('data', function (content) {
              content = content.toString('utf-8');

              log.debug('entry on data [' + fileName + ']:');

              if (fileName === 'package.json') {
                content = JSON.parse(content);
                content.version = '0.0.1';
                content.name = '@namespace/' + answers.comName;
                content = JSON.stringify(content, null, 2);
              }

              content = content.replace(/{comName}/g, comName);
              content = content.replace(/{comCnName}/g, answers.comCnName);
              content = content.replace(/{comDesc}/g, answers.comDesc);
              content = content.replace(/{username}/g, answers.username);
              content = content.replace(/{ComName}/g, _.camelCase(comName));
              
              fs.writeFileSync(Path.join('.', fileName), content);
            })
          }).on('close', function () {
            resolve();
          })
      })
    }).catch(function (e) {
      throw e.stack || e;
    })
  }

  function showQuestions(examples) {
    log.debug('[2]提问阶段, 获取的远端组件列表：', examples);
    var questions = [
      {
        type: "input",
        name: "comName",
        message: "?你要创建的组件名(字母, -, 数字)是...",
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          if (/_/.test(value)) {
            return '不允许存在下划线';
          }

          if (fs.existsSync(value)) {
            return '该组件目录本地已存在！';
          }
          return true;
        }
      },
      {
        type: "input",
        name: "comCnName",
        message: "?你要创建的组件中文名是...",
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          return true;
        }
      },
      {
        type: "input",
        name: "comDesc",
        message: "?你要创建的组件描述是...",
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          return true;
        }
      },
      {
        type: 'list',
        name: 'comTemplate',
        message: '?请从组件模板中选择你要创建的组件...',
        choices: examples.length && _.map(examples, 'cn_name') || ['基本文字']
      }
    ];

    return inquirer.prompt(questions).then(function (answers) {
      answers.comTemplate = _.find(examples, {'cn_name': answers.comTemplate})
      return answers;
    });
  }

  function getExampleList() {
    log.debug('[1]获取远端组件阶段, 请求url:', config.server + 'modules/examples');
    return urllib.request(config.server + 'modules/examples', {dataType: 'json'}).then(function (data) {
      data = data.data;
      log.debug('获得了远程组件数据', data);
      if (!semver.satisfies(config.version, data['datav-cli-version'])) {
        log.warn('你的' + config.name + '版本为', config.version, '远程组件列表要求版本为' + data['datav-cli-version'])
        log.warn('所以可能无法获得最新组件模板, 请更新版本或联系程序员.')
      }
      return data.coms || [];
    }).catch(function (e) {
      log.err('获取远程组件模板失败, 所以只能创建基本文字组件.');
      return []
    })
  }

  function sayHello() {
    log.debug('[0]打招呼阶段');
    return new Promise((resolve) => {
      log.info('');
      resolve()
    })
  }

  sayHello()
    .then(getExampleList)
    .then(showQuestions)
    .then(createDirForCom)
    .then(function () {
      log.info('组件创建完毕');
    }).catch(function (e) {
      log.err(e);
    })
}



