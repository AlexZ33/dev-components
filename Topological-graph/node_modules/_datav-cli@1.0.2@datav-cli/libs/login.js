'use strict';

var inquirer = require("inquirer");
var path     = require('path');
var fs       = require('fs');
var ini      = require('ini');
var log      = require('./utils/log');
var urllib   = require('urllib');
var childProcess = require('child_process');
var _ = require('lodash');

const URL = '';
const SALT_ROUNDS = 10;

var root;
if (process.platform === 'win32') {
  root = process.env.USERPROFILE || process.env.APPDATA || tmpdir;
} else {
  root = process.env.HOME || tmpdir;
}

module.exports = function (config, args) {
  let datavrc = path.join(root, '.datavrc');
  let content;

  //1. 检查.datavrc
  //2. 填写表单
  //3. 写文件
  function createFile(answers) {
    log.debug('[3]写权限阶段.');
    answers.nickname = answers.nickname && answers.nickname !== "undefined" ? answers.nickname : config.regionDefault;
    try {
      let arr = answers.token.split(':');
      let region = config.region[arr[1]];
      if (!region) throw '提供的token是错误的，请检查或联系管理员';
      answers.region = region;
      content[answers.nickname] = answers;
      fs.writeFileSync(datavrc, ini.stringify(content, { whitespace: true }));
    } catch (e) {
      throw '创建.datavrc文件出错' + (e.stack || e);
    }
  }

  function checkRC() {
    log.debug('[1]检查datavrc文件阶段');
    
    if (fs.existsSync(datavrc)) {
      try {
        content = ini.parse(fs.readFileSync(datavrc, 'utf-8'));
      } catch (e) {
        content = {}
      }
    } else {
      content = {};
    }
    log.debug('.datavrc的内容是:', content);
    return new Promise((resolve) => {
      resolve()
    })
  }

  function showQuestions() {
    log.debug('[2]提问阶段.');
    let questions = [
      {
        type: "input",
        name: "username",
        message: "?你的用户名是...[登录datav.aliyun.com首页显示的用户名]",
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          return true;
        }
      },
      {
        type: "input",
        name: "token",
        message: "?你的token是...[登录datav.aliyun.com<我的组件页>用户信息中显示的token值]",
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          return true;
        }
      },
      {
        type: "input",
        name: "nickname",
        message: "?请为你的新建账户信息设置别名...",
        when: !_.isEmpty(content),
        validate: function (value) {
          if (!value) {
            return '不允许为空';
          }
          if (content[value]) {
            return '已经有此别名的账户信息了...'
          }
          if (value === 'undefined') {
            return '该别名不太好吧...换个吧...'
          }
          return true;
        }
      }
    ];
    
    return inquirer.prompt(questions);
  }

  function sayHello() {
    log.debug('[0]打招呼阶段');
    return new Promise((resolve) => {
      log.info('欢迎');
      resolve()
    })
  }

  checkRC()
    .then(showQuestions)
    .then(createFile)
    .then(() => {
      log.info('恭喜!设置成功!');
    }).catch(function (e) {
      log.err(e);
    })
}
