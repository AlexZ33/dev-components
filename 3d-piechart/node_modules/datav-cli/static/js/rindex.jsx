var _ = require('lodash');
var $ = require('jquery');
var React = require('react');
var Editor = require('./editor.jsx');
require('../css/editor.less');

window.render = function (chart, apis) {
  for (var key in apis) {
    var api = apis[key];
    var handler = api.handler || 'render';
    var data = api.default;
    //不检查data,用作检查组件应对脏数据
    chart[handler](_.cloneDeep(data));
  }
}
/************* datav 数据 ***************/
var datav = window.share.datav;
var view = datav.view;
var config = datav.config;
var apis = datav.apis;
var coms = datav.coms;
var validate = datav.validate;
var children = coms && coms.children;
var defaultChildren = datav.children && datav.children.default ? datav.children.default : null;
/************* datav 数据 ***************/

function initCom(selector, cb) {
  var chartWidth, chartHeight, chartMinWidth, chartMinHeight;
  if (view) {
    chartWidth = window.share.chartWidth = parseInt(view.width) || 400;
    chartHeight = window.share.chartHeight = parseInt(view.height) || 0;
    chartMinWidth = window.share.chartMinWidth = parseInt(view.minWidth) || 0;
    chartMinHeight = window.share.chartMinHeight = parseInt(view.minHeight) || 0;
  } else {
    chartWidth = window.share.chartWidth = 400;
    chartHeight = window.share.chartHeight = 0;
    chartMinWidth = window.share.chartMinWidth = 0;
    chartMinHeight = window.share.chartMinHeight = 0;
  }
  var dom = window.chartDom = $(selector);
  dom.css({
    width: chartWidth + 'px',
    height: chartHeight + 'px',
    minWidth: chartMinWidth + 'px',
    minHeight: chartMinHeight + 'px'
  })

  load('/' + window.share.source, function (Chart) {
    var cfg = _.cloneDeep(config);
    cfg.apis = _.cloneDeep(apis);
    var time1 = new Date();
    window.Chart = Chart;
    var chart = window.chart = new Chart(selector, cfg);
    render(chart, apis);
    window.time = new Date() - time1;
    
    
    if (defaultChildren) {
      _.forEach(window.share.children, function (c) {
        //转换格式，以适应 children-selector 组件，与线上保持一致
        c.config = c.datav;
      });


      var cbNumber = 0;
      for (var i = 0; i < defaultChildren.length; i++) {
        var name = defaultChildren[i];
        var index = _.findIndex(window.share.children, function (o) {
          return o.name == name;
        });
        if (index >= 0) {
          _addToParent(window.share.children[index]._dir, function () {
            cbNumber ++;
            if (cbNumber == defaultChildren.length) {
              cb && cb();
            }
          });
        }
      }
    } else {
      cb && cb();
    }
  })
}

function _addToParent(_dir, cb) {
  load(['/children/' + _dir + '/index.js'], function (_Com) {
    var comConfig = _getComConfigByDir(_dir);
    var _config = JSON.parse(JSON.stringify(comConfig.datav.config));
    var _childrenCom = new _Com($('<div/>'), _config);

    var _comId = comConfig.datav.cn_name + '_' + randomWord(false, 5);
    if (!window.share.childrenComs) {
      window.share.childrenComs = [];
      window.share.childrenIds = [];
    }
    window.share.childrenComs.push({
      comId: _comId,
      _dir: _dir,
      instance: _childrenCom,
      _config: _config,
      _apisData: JSON.parse(JSON.stringify(comConfig.datav.api_data))
    });
    window.share.childrenIds.push(_comId);

    window.chart && window.chart.add && window.chart.add(_childrenCom, _comId);
    render(_childrenCom, comConfig.datav.apis);
    // self._updateChildrenList();
    cb && cb();
  });
}

function _getComConfigByDir (_dir) {
  var index = _.findIndex(window.share.children, function(o) {
    return o._dir == _dir;
  });
  if (index >= 0) {
    return window.share.children[index];
  } else {
    return null;
  }
}
window.getComConfigByDir = _getComConfigByDir;

function randomWord (randomFlag, min, max) {
  var str = "",
    range = min,
    arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];

  // 随机产生
  if(randomFlag){
    range = Math.round(Math.random() * (max-min)) + min;
  }
  for(var i = 0; i < range; i++){
    var pos = Math.round(Math.random() * (arr.length-1));
    str += arr[pos];
  }
  return str;
}

window.randomWord = randomWord;


function change() {
  var handler = validate.handler;
  var content = _.cloneDeep(handler && text || allText);
  if (chart[handler]) return chart[handler](content);
  if (chart.updateOptions) return chart.updateOptions(content);
  return chart.render(null, content);
}


module.exports = function (config) {
  initCom(config.com, function () {
    React.render(
      <Editor />,
      $(config.editor).get(0)
    );
    // ec.tabs.length && ec.tabs.forEach(function (obj) {
    //   obj.handler && obj.handler(editor.getTab(obj.id));
    // })
    // initEvent()
  });

  
}